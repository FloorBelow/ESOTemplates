

struct EsoExtractData {
    char magic[4] <bgcolor=cBlack>;
    uint index <bgcolor=cBlack>;
    uint size1 <bgcolor=cBlack>;
    uint size2 <bgcolor=cBlack>;
    uint compressedSize <bgcolor=cBlack>;
};

struct RowHeader {
    uint id1 <bgcolor=cBlack>;
    uint id2 <bgcolor=cBlack>;
    uint dataSize <bgcolor=cBlack>;
};

typedef struct {
    uint id <bgcolor=cDkAqua>;
    ushort nameSize <bgcolor=cDkAqua,hidden=true>;
    char name[nameSize] <bgcolor=cDkAqua>;
    byte nameTerminator <bgcolor=cDkAqua,hidden=true>;
    uint zero1 <bgcolor=cDkAqua,hidden=true>;
    uint zeroToTwo <bgcolor=cDkAqua>;
    ushort updateTag <bgcolor=cDkAqua>;
    uint zero2 <bgcolor=cDkAqua,hidden=true>;
    uint id2 <bgcolor=cDkAqua,hidden=true>;
} Row <read=RowRead>;

string RowRead( Row &m ) {
    if(m.nameSize > 0) {
        string s = "";
        SPrintf(s, "%d %s", m.id, m.name);
        return s;
    } else {
        return "unnamed";
    }
};


struct IDArray {
    uint count <bgcolor=cDkBlue>;
    uint ids[count] <bgcolor=cDkGreen>;
};

struct WaterVolume {
    uint height <bgcolor=cDkYellow>;
    uint waterTypeKey <bgcolor=cDkYellow>;
    uint number2 <bgcolor=cDkYellow>;
    uint number3 <bgcolor=cDkYellow>;
};

struct WorldTileMapLayer {
    uint key <bgcolor=cDkYellow>;
    uint unk;
    uint dataSize;

    LittleEndian();
    uint data[dataSize/4] <bgcolor=cDkPurple>;
    BigEndian();
    byte end;
};

struct WorldTileMap {

    uint worldKey <bgcolor=cDkYellow>;
    uint x;
    uint y;
    uint type <bgcolor=cDkBlue>;
    uint cellSizeX;
    uint cellSizeY;
    uint layerCount;
    WorldTileMapLayer layers[layerCount] <optimize=false>;
};

struct PointOfInterest {
    uint type;
    uint unk1;
    uint unk2;
    uint unkID1;
    uint unkID2;
    uint requiredQuestCount;
    uint requiredQuests[requiredQuestCount];
    uint unkID3;
    uint unkID4;
};

struct Quest {
    byte unk[3];
    IDArray unkID1;
    IDArray unkID2;
    IDArray unkID3;
    uint unkID4;
    IDArray unkID5;
    uint type <bgcolor=cPurple>;
    uint level <bgcolor=cAqua>;
    uint questRewardID;
    uint unk2;
    IDArray antiPrereqs;
    IDArray antiCurrents;
    IDArray antiEndings;
    uint unk3;
    uint poiID <bgcolor=cDkRed>;
    uint zoneID <bgcolor=cDkYellow>;
    uint zone2ID <bgcolor=cDkYellow>;
    uint unk4;
    IDArray bestowals;
    uint unk5;
    uint unk6;
    uint companionLevel;
    uint zero <hidden=true>;
    uint unk7;
    uint unk8;
    uint zero2 <hidden=true>;
    uint companionID;
    uint64 zero3 <hidden=true>;
};

struct QuestStep {
    uint unk1;
    uint unk2;
    IDArray questConditions;
    uint endingID;
    IDArray failConditions;
    byte optional;
    byte allowAutoAdvance;
    byte transient;
    byte questToolGroupShared;
    byte hideQuestTimer;
    byte unk3;
    IDArray optionalSteps;
};

struct Zone (uint version) {
    uint zoneSetID;
    uint colorCount;
    float color[colorCount] <bgcolor=cDkRed>;
    uint worldID <bgcolor=cBlue>;
    byte unk[14];
    if(version > 141) byte unk;
    uint mapID;
    IDArray pois;
    IDArray skyshards;
    uint unk2; //2 if cyrodiil, 0 else?
    uint unk3;
    IDArray graveyards;
    uint loadingScreen <bgcolor=cYellow>;
    uint unk4;
    uint parentWorld <bgcolor=cBlue>;
    uint unk6;
    uint unk7;
    LittleEndian();
    float scaleX <bgcolor=cDkRed>;
    float scaleY <bgcolor=cDkRed>;
    BigEndian();
    int offsetX <bgcolor=cDkRed>;
    int offsetY <bgcolor=cDkRed>;

    uint unk8;
    uint unk9;
    uint worldPositonNodeID <bgcolor=cBlue>;

    uint unk11; //dunno
    uint unk12;
    uint unk13;
    uint monsterModifierID <bgcolor=cBlue>; //0 dungeons, dragonguard temples, 2138 everywhere else
    uint zero <hidden=true>;
    uint unk16;

    ushort short1;
    ushort short2;

    uint unk17;
    IDArray zoneOffsetSliceVolumes; //0x131 - map offsets

    uint unk18;
    uint unk19;
    uint unk20Count;
    uint unk20[unk20Count];
    uint unk21;
    uint unk22;
    uint ikRulesetOverrideCount;
    uint ikRulesetOverrides[ikRulesetOverrideCount] <bgcolor=cDkBlue>;

    uint unkLevelRelated;
    uint unk24Count;
    uint unk24[unk24Count * 3];


    LittleEndian();
    float f1 <bgcolor=cDkRed>;
    float f2 <bgcolor=cDkRed>;
    float f3 <bgcolor=cDkRed>;
    BigEndian();
    
    uint zoneStoryBackgroundAsset <bgcolor=cYellow>;    
    uint zoneStoryGPBackgroundAsset <bgcolor=cYellow>; 

    IDArray childZones;
    //IDArray array2;
    uint const15 <hidden=true>;
    uint veteran1;
    uint veteran2;
    uint veteran3;
    IDArray achievements; //quests, pup dung, group dung, fish?
    uint z2 <hidden=true>;
    IDArray delveAchievements;
    uint z3 <hidden=true>;
    IDArray skyshardAchievements; //Deadlands only?
    uint64 z4 <hidden=true>;
    IDArray strikingLocaleAchievements;
    uint64 z5 <hidden=true>;
    uint64 z6 <hidden=true>;
    IDArray array2;
    IDArray array3; //0x191 not sure
    IDArray pointerQuests;
    uint parentZoneID <bgcolor=cBlue>;
    uint unk29ID; //either 1a0 or 19f
    LittleEndian();
    float f4 <bgcolor=cDkRed>; //13 halls of colossus, 1 everywhere else
    BigEndian();
    uint unk30;

};

struct ItemSet {
    uint statCount;
    struct {
        uint setNumber <bgcolor=cDkYellow>;
        uint stat <bgcolor=cDkGreen>;
        uint unk;
        LittleEndian();
        float value <bgcolor=cDkRed>;
        BigEndian();
    } stats[statCount];

    uint abilityCount;
    struct {
        uint abilityID1 <bgcolor=cDkBlue>;
        uint abilityID2 <bgcolor=cDkBlue>;
        uint setNumber <bgcolor=cDkYellow>;
    } abilities[abilityCount];
    uint unk1;
    uint itemIDCount;
    uint itemIDs[itemIDCount] <bgcolor=cDkBlue>;
    uint unk2;
    uint unk3;
    uint unk4;
    uint unk5;
    uint unk6;
    uint unk7;
    uint unk8;
    byte zero <bgcolor=cRed>;
};

struct TerrainTexture {
    uint static1;
    uint zero1;
    uint important <bgcolor=cDkYellow>;
    uint id2;
    uint id3;
    uint zero2;
};

struct ItemVisualTemplate {
    
    struct Material {
        uint unk1;
        uint tint[3] <bgcolor=cDkRed>;
        uint assetID1 <bgcolor=cDkGreen>;
        uint assetID2 <bgcolor=cDkGreen>;
        uint itemPartMaterialID1 <bgcolor=cDkBlue>;
        uint itemPartMaterialID2 <bgcolor=cDkBlue>;
        byte unk[23] <bgcolor=cDkPurple>;
    };
    uint material1Count;
    Material materials1[material1Count];
    uint material2Count <bgcolor=cBlue>;
    Material materials2[material2Count];
    uint material3Count <bgcolor=cBlue>;
    Material materials3[material3Count];
    uint data[45];
};

struct ItemPartMaterial {
    uint id1;
    uint id2;
    uint id3;
    uint id4;
    byte zero<hidden=true>;
};

struct Book {
    uint count;
    //
    uint unk[count*2];
    uint monsterID <bgcolor=cBlue>;
    uint fontOrBackground;
    uint collectionID <bgcolor=cBlue>;
    uint iconAsset <bgcolor=cYellow>;
    uint isLorebook;
    byte bool1;
    uint zero <hidden=true>;
};

struct Map {

    //should be cppstr
    ushort pathSize <hidden=true>;
    char path[pathSize];
    byte zero <hidden=true>;
    
    byte tilesX;
    byte tilesY;
    ushort tileRes;

    //divided by 100, tamriel is moved 3500 upwards
    uint sizeX <bgcolor=cGreen>;
    uint sizeY <bgcolor=cGreen>;
    int posX <bgcolor=cAqua>;
    int posY <bgcolor=cAqua>;

    uint zoneID <bgcolor=cDkBlue>;
    uint unk5;
    uint enum1;
    uint parentMapID <bgcolor=cDkBlue>;
    uint unk6;
    
    uint blobCount;
    struct {
        uint texture <bgcolor=cDkRed>;
        uint mapID <bgcolor=cDkBlue>;
        int sizeX;
        int sizeY;
        int posX;
        int posY;
    } blobs[blobCount];

    IDArray locations;

    uint unk7;
    uint enum2;
    uint enum3;
    uint unk8;
    byte disablePOIs;
    uint unk9;
    
    
};

struct WorldPositionNode {
    uint z1;
    uint z2;
    uint z3;
    uint z4;
    uint doorCount;
    struct {
        uint unk;
        uint doorID <bgcolor=cBlue>;
        uint requirementID;
        byte teleport;
    } doors[doorCount];
    uint colorCount;
    LittleEndian();
    float r <bgcolor=cDkRed>;
    float g <bgcolor=cDkRed>;
    float b <bgcolor=cDkRed>;
    float a <bgcolor=cDkRed>;
    BigEndian();
};

struct Door {
    uint countIs2;
    uint x1 <bgcolor=cDkGreen>;
    uint y1 <bgcolor=cDkGreen>;
    uint x2 <bgcolor=cDkGreen>;
    uint y2 <bgcolor=cDkGreen>;
    LittleEndian();
    float f <bgcolor=cDkRed>;
    BigEndian();
    uint requirementListID <bgcolor=cBlue>;
    uint unk;
    uint worldPositionNodeID <bgcolor=cBlue>;
};


struct Clickable {
    IDArray books;
};

BigEndian();
char magic[4] <hidden=true>;
uint version <hidden=true>;
uint numRecords;
uint defVersion;

local int i;
local int offset;
for(i = 0; i < numRecords; i++) {
    EsoExtractData header1 <hidden=true>;
    RowHeader header2 <hidden=true>;
    offset = FTell();
    Row row;
    Zone data(defVersion);
    FSeek(header2.dataSize + offset);
}



